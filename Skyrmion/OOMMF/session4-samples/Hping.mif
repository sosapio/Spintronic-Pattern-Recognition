# MIF 2.2
# Simple example using time driver
set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]

Parameter stage_time 0.005 ;# Stage length in ns
Parameter run_time  10.  ;# Total run time in ns
set number_of_stages [expr {int(ceil($run_time/double($stage_time)))}]
set stage_time [expr {$stage_time*1e-9}]

Parameter Hbias         10 ;# Bias field, in mT
Parameter pulse_amp    100 ;# Pulse amplitude, in mT
Parameter pulse_period 0.1 ;# Pulse sine period, in ns
Parameter pulse_offset 0.5 ;# Pulse offset, in ns

set pulse_scale [expr {2*$pi*1e9/$pulse_period}]
set pulse_offset [expr {$pulse_offset*1e-9}]

Parameter xcell 4 ;# Cell size in nm
Parameter ycell 4
Parameter zcell 4
set basename [format "simpletime-%3.1fx%3.1fx%3.1f" $xcell $ycell $zcell]
set xcell [expr {$xcell*1e-9}]
set ycell [expr {$ycell*1e-9}]
set zcell [expr {$zcell*1e-9}]

SetOptions [subst {
   basename $basename
}]
Report "Output basename: $basename"

Specify Oxs_EllipsoidAtlas:atlas {
  xrange {0 256e-9}
  yrange {0  64e-9}
  zrange {0  64e-9}
  name ellipsoid
}

Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$xcell $ycell $zcell}
  atlas :atlas
}]

Specify Oxs_UniformExchange {
  A  13E-12
}

Specify Oxs_Demag {}

# Small bias field
Specify Oxs_FixedZeeman [subst {
  multiplier [expr {0.001/$mu0}]
  field {10. 0. 0.}
}]

# Sinc pulse
proc Sinc { t } {
   if {abs($t)<1e-6} {
      set v [expr {1-$t*$t/6.}]
      set dv [expr {$t*$t*$t/-3.}]
   } else {
      set v [expr {sin($t)/$t}]
      set dv [expr {($t*cos($t)-sin($t))/($t*$t)}]
   }
   return [list $v $dv]
}
proc SincPulse { total_time } {
   global pulse_amp pulse_scale pulse_offset
   set t [expr {$total_time - $pulse_offset}]
   set st [expr {$t*$pulse_scale}]
   set vals [Sinc $st]
   set Hy [expr {$pulse_amp*[lindex $vals 0]}]
   set dHy [expr {$pulse_amp*$pulse_scale*[lindex $vals 1]}]
   return [list 0 $Hy 0 0 $dHy 0]
}
Specify Oxs_ScriptUZeeman [subst {
   multiplier [expr {0.001/$mu0}]
   script SincPulse
   script_args total_time
}]

Specify Oxs_RungeKuttaEvolve:evolver {
   alpha 0.001
}
# Note: If simulation goes unstable, try including
#    method rkf54s
# in the Oxs_RungeKuttaEvolve Specify block

Specify Oxs_TimeDriver [subst {
   evolver :evolver
   mesh :mesh
   stopping_time $stage_time
   stage_count $number_of_stages
   Ms {Oxs_AtlasScalarField {
      atlas :atlas
      default_value 0.0
      values { ellipsoid 8e5 }
   }}
   m0 {1 0 0}
}]
